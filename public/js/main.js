!function(){"use strict";const t=document.getElementById("vacanciesFilterBtns"),n=document.getElementById("vacanciesFilter"),a=document.getElementById("clearFilter"),e=document.getElementById("vacanciesContainer");function c(n){const a=Array.from(t.children).filter((t=>t.classList.contains("button--clear"))).map((t=>t.getAttribute("data-category").toLowerCase()));if(0===a.length)return void u(n);const e=a.reduce(((t,n)=>t=t.filter((t=>{const{role:a,level:e,languages:c,tools:o}=t;return[a,e,...c,...o].map((t=>t.toLowerCase())).includes(n)}))),n);e.length>0&&u(e)}function o(n){e.addEventListener("click",(a=>function(n,a){const e=a.target;if(e.classList.contains("button--primary")){const a=e.getAttribute("data-category"),o=Array.from(l.children).filter((t=>t.classList.contains("button--clear"))).map((t=>t.getAttribute("data-category").toLowerCase()));!function(n,a,e){if(!e.includes(n)){const e=document.createElement("button");e.className="button button--primary button--clear",e.style.textTransform="capitalize",e.innerText=n,e.setAttribute("data-category",n),e.addEventListener("click",(function(){e.remove(),r(),c(a)})),t.appendChild(e),r()}}(a,n,o),c(n)}}(n,a))),a.addEventListener("click",(()=>function(t){document.querySelectorAll(".button--clear").forEach((t=>t.remove())),r(),c(t)}(n)))}function r(){const t=document.querySelectorAll(".button--clear");n.style.display=t.length>0?"flex":"none"}function s(t){return`\n        <div class="vacancy__card ${t.featured?"vacancy__card--featured":""}">\n            <img src="${t.logo}" class="vacancy__img" alt="">\n            <div class="vacancy__info">\n                <div class="vacancy__tags">\n                    <span class="tag vacancy__tag">${t.company}</span>\n                    ${t.new?'<span class="tag tag--new vacancy__tag">New!</span>':""}\n                    ${t.featured?'<span class="tag tag--featured vacancy__tag">featured</span>':""}\n                </div>\n\n                <h2 class="vacancy__title">\n                    <a href="" title=""> ${t.position} </a>\n                </h2>\n\n                <div class="vacancy__description">\n                    <span class="vacancy__description-item">${function(t){const n=Math.floor(Date.now()/1e3)-t,a=604800,e=2592e3;if(n>=e)return`${Math.floor(n/e)}mo ago`;if(n>=a)return`${Math.floor(n/a)}w ago`;if(n>=86400)return`${Math.floor(n/86400)}d ago`}(t.postedAt)}</span>\n                    <span class="vacancy__description-item">${t.contract}</span>\n                    <span class="vacancy__description-item">${t.location}</span>\n                </div>\n            </div>\n            <div class="vacancy__buttons">\n                <button type="button" class="button button--primary vacancy__btn" data-category="${t.role.toLowerCase()}">${t.role}</button>\n                <button type="button" class="button button--primary vacancy__btn" data-category="${t.level.toLowerCase()}">${t.level}</button>\n                ${t.languages.map((t=>`<button type="button" class="button button--primary vacancy__btn" data-category="${t.toLowerCase()}">${t}</button>`)).join("")}\n                ${t.tools.map((t=>`<button type="button" class="button button--primary vacancy__btn" data-category="${t.toLowerCase()}">${t}</button>`)).join("")}\n            </div>\n        </div>\n    `}const i=document.getElementById("vacanciesContainer"),l=document.getElementById("vacanciesFilterBtns");function u(t){const n=t.map((t=>s(t))).join("");i.innerHTML=n}const d=document.getElementById("vacanciesError");(()=>{e?async function(){try{if(!i&&!l)return;const t=await fetch("./data.json"),n=await t.json();u(n),o(n)}catch(t){console.error("Error loading data!",t)}}():(d.innerHTML="\n      <h1>404</h1>\n      <p>\n        An error has occurred. Contact support or try again later\n      </p>\n    ",d.className="vacancies-error")})()}();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,