!function(){"use strict";function n(n){return`\n        <div class="vacancy__card ${n.featured?"vacancy__card--featured":""}">\n            <img src="${n.logo}" class="vacancy__img" alt="">\n            <div class="vacancy__info">\n                <div class="vacancy__tags">\n                    <span class="tag vacancy__tag">${n.company}</span>\n                    ${n.new?'<span class="tag tag--new vacancy__tag">New!</span>':""}\n                    ${n.featured?'<span class="tag tag--featured vacancy__tag">featured</span>':""}\n                </div>\n\n                <h2 class="vacancy__title">\n                    <a href="" title=""> ${n.position} </a>\n                </h2>\n\n                <div class="vacancy__description">\n                    <span class="vacancy__description-item">${function(n){const a=Math.floor(Date.now()/1e3)-n,t=604800,c=2592e3;if(a>=c)return`${Math.floor(a/c)}mo ago`;if(a>=t)return`${Math.floor(a/t)}w ago`;if(a>=86400)return`${Math.floor(a/86400)}d ago`}(n.postedAt)}</span>\n                    <span class="vacancy__description-item">${n.contract}</span>\n                    <span class="vacancy__description-item">${n.location}</span>\n                </div>\n            </div>\n            <div class="vacancy__buttons">\n                <button \n                    type="button" \n                    class="button button--primary vacancy__btn"\n                    data-category="${n.role.toLowerCase()}"\n                >\n                    ${n.role}\n                </button>\n                <button \n                    type="button" \n                    class="button button--primary vacancy__btn" \n                    data-category="${n.level.toLowerCase()}"\n                >\n                    ${n.level}\n                </button>\n                ${n.languages.map((n=>`\n                    <button \n                        type="button" \n                        class="button button--primary vacancy__btn" \n                        data-category="${n.toLowerCase()}"\n                    >\n                        ${n}\n                    </button>\n                `)).join("")}\n                ${n.tools.map((n=>`\n                    <button \n                        type="button" \n                        class="button button--primary vacancy__btn" \n                        data-category="${n.toLowerCase()}"\n                    >\n                        ${n}\n                    </button>\n                `)).join("")}\n            </div>\n        </div>\n    `}(async()=>{const a=document.getElementById("vacanciesContainer"),t=document.getElementById("vacanciesFilter");if(!a||!t)return;let c=[];const o=async()=>{try{const o=await async function(n){const a=await fetch("./data.json"),t=await a.json();return n.reduce(((n,a)=>n.filter((n=>{const{role:t,level:c,languages:o,tools:e}=n;return[t,c,...o,...e].map((n=>n.toLowerCase())).includes(a)}))),t)}(c),s=function(n,a){console.log(n),console.log(a)}(c,e),r=function(a,t){return Array.isArray(a)&&a.length>0?a.map((a=>n(a))).join(""):'<div class="listEmpty-mess">List of vacancies empty</div>'}(o);t.innerHTML=s,a.innerHTML=r}catch(n){console.error("Error loading vacancies:",n),a.innerHTML='<div class="error-mess">Sorry! Something went wrong!</div>'}},e=async n=>{c=n,await o()};await o()})()}();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,