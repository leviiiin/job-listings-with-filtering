!function(){"use strict";function n(n,a){const{role:t,level:e,languages:c,tools:s}=n,r=[t,e,...c,...s].map((n=>n)),i=document.createElement("div");i.className="vacancy__card "+(n.featured?"vacancy__card--featured":""),i.innerHTML=`\n    <img src="${n.logo}" class="vacancy__img" alt="">\n    <div class="vacancy__info">\n        <div class="vacancy__tags">\n            <span class="tag vacancy__tag">${n.company}</span>\n            ${n.new?'<span class="tag tag--new vacancy__tag">New!</span>':""}\n            ${n.featured?'<span class="tag tag--featured vacancy__tag">featured</span>':""}\n        </div>\n\n        <h2 class="vacancy__title">\n            <a href="" title=""> ${n.position} </a>\n        </h2>\n\n        <div class="vacancy__description">\n            <span class="vacancy__description-item">${function(n){const a=Math.floor(Date.now()/1e3)-n,t=604800,e=2592e3;if(a>=e)return`${Math.floor(a/e)}mo ago`;if(a>=t)return`${Math.floor(a/t)}w ago`;if(a>=86400)return`${Math.floor(a/86400)}d ago`}(n.postedAt)}</span>\n            <span class="vacancy__description-item">${n.contract}</span>\n            <span class="vacancy__description-item">${n.location}</span>\n        </div>\n    </div>\n    <div class="vacancy__buttons">\n        ${r.map((n=>`\n            <button \n                type="button" \n                class="button button--primary vacancy__btn" \n                data-category="${n.toLowerCase()}"\n            >\n                ${n}\n            </button>\n        `)).join("")}\n    </div>\n    `;return i.querySelectorAll(".vacancy__btn").forEach((n=>{n.addEventListener("click",(n=>{n.preventDefault;const t=n.target.closest(".vacancy__btn").getAttribute("data-category");a(t)}))})),i}(async()=>{const a=document.getElementById("vacanciesContainer"),t=document.getElementById("vacanciesFilter");if(!a||!t)return;let e=[];const c=async()=>{try{const c=await async function(n){const a=await fetch("./data.json"),t=await a.json();return n.reduce(((n,a)=>n.filter((n=>{const{role:t,level:e,languages:c,tools:s}=n;return[t,e,...c,...s].map((n=>n.toLowerCase())).includes(a)}))),t)}(e),r='\n    <div class="vacancies-filter__btns" id="filterBtns">\n\n    </div>\n    <span class="vacancies-filter__reset" id="">Clear</span>\n  ',i=function(a,t){return Array.isArray(a)&&a.length>0?a.reduce(((a,e)=>(a.appendChild(n(e,t)),a)),document.createDocumentFragment()):'<div class="vacancies-list__message">List of vacancies empty</div>'}(c,s);t.innerHTML=r,a.replaceChildren(),a.appendChild(i)}catch(n){console.error("Error loading vacancies:",n),a.innerHTML='\n      <div class="vacancies-list__message--error">\n        Sorry! Something went wrong!\n      </div>'}},s=async n=>{e.push(n),await c()};await c()})()}();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,