!function(){"use strict";function a(a,n){const{role:t,level:e,languages:c,tools:s}=a,r=[t,e,...c,...s].map((a=>a)),o=document.createElement("div");o.className="vacancy__card "+(a.featured?"vacancy__card--featured":""),o.innerHTML=`\n    <img src="${a.logo}" class="vacancy__img" alt="">\n    <div class="vacancy__info">\n        <div class="vacancy__tags">\n            <span class="tag vacancy__tag">${a.company}</span>\n            ${a.new?'<span class="tag tag--new vacancy__tag">New!</span>':""}\n            ${a.featured?'<span class="tag tag--featured vacancy__tag">featured</span>':""}\n        </div>\n\n        <h2 class="vacancy__title">\n            <a href="" title=""> ${a.position} </a>\n        </h2>\n\n        <div class="vacancy__description">\n            <span class="vacancy__description-item">${function(a){const n=Math.floor(Date.now()/1e3)-a,t=604800,e=2592e3;if(n>=e)return`${Math.floor(n/e)}mo ago`;if(n>=t)return`${Math.floor(n/t)}w ago`;if(n>=86400)return`${Math.floor(n/86400)}d ago`}(a.postedAt)}</span>\n            <span class="vacancy__description-item">${a.contract}</span>\n            <span class="vacancy__description-item">${a.location}</span>\n        </div>\n    </div>\n    <div class="vacancy__buttons">\n        ${r.map((a=>`\n            <button \n                type="button" \n                class="button button--primary vacancy__btn" \n                data-category="${a.toLowerCase()}"\n            >\n                ${a}\n            </button>\n        `)).join("")}\n    </div>\n    `;return o.querySelectorAll(".vacancy__btn").forEach((a=>{a.addEventListener("click",(a=>{a.preventDefault();const t=a.target.closest(".vacancy__btn").getAttribute("data-category");n(t)}))})),o}(async()=>{const n=document.getElementById("vacanciesContainer"),t=document.getElementById("vacanciesFilterContainer");if(!n||!t)return;let e=[];const c=async()=>{try{const c=await async function(a){const n=await fetch("./data.json"),t=await n.json();return a.reduce(((a,n)=>a.filter((a=>{const{role:t,level:e,languages:c,tools:s}=a;return[t,e,...c,...s].map((a=>a.toLowerCase())).includes(n)}))),t)}(e),o=function(a,n){let t=a.map((a=>`<button class="button button--primary button--clear" data-category="${a.toLowerCase()}">${a}</button>`)).join("");const e=document.createElement("div");return e.className="vacancies-filter",e.innerHTML=`\n    <div class="vacancies-filter__btns" id="filterBtns">\n      ${t}\n    </div >\n    <span class="vacancies-filter__reset">Clear</span>\n  `,e.querySelectorAll(".button--clear").forEach((t=>{t.addEventListener("click",(t=>{t.preventDefault();const e=t.target.closest(".button--clear");if(e){const t=e.getAttribute("data-category"),c=a.filter((a=>a!==t));n(c),e.remove()}}))})),e.querySelector(".vacancies-filter__reset").addEventListener("click",(()=>{n([])})),e}(e,s),i=function(n,t){return Array.isArray(n)&&n.length>0?n.reduce(((n,e)=>(n.appendChild(a(e,t)),n)),document.createDocumentFragment()):'<div class="vacancies-list__message">List of vacancies empty</div>'}(c,r);t.replaceChildren(),t.appendChild(o),n.replaceChildren(),n.appendChild(i)}catch(a){console.error("Error loading vacancies:",a),n.innerHTML='\n      <div class="vacancies-list__message--error">\n        Sorry! Something went wrong!\n      </div>'}},s=async a=>{e=a,await c()},r=async a=>{e.push(a),await c()};await c()})()}();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInNyYy9zY3JpcHRzL21vZHVsZXMvdmFjYW5jaWVzQm9hcmQvY29tcG9uZW50cy9jcmVhdGVWYWNhbmN5Q2FyZC5qcyIsInNyYy9zY3JpcHRzL3V0aWxzL2NvbnZlcnRUaW1lLmpzIiwic3JjL3NjcmlwdHMvbW9kdWxlcy92YWNhbmNpZXNCb2FyZC9pbml0VmFjYW5jaWVzQm9hcmQuanMiLCJzcmMvc2NyaXB0cy9hcGkvdmFjYW5jaWVzL2dldFZhY2FuY2llcy5qcyIsInNyYy9zY3JpcHRzL21vZHVsZXMvdmFjYW5jaWVzQm9hcmQvY29tcG9uZW50cy9jcmVhdGVWYWNhbmN5RmlsdGVyLmpzIiwic3JjL3NjcmlwdHMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydFRpbWUgfSBmcm9tICcuLi8uLi8uLi91dGlscy9jb252ZXJ0VGltZSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVmFjYW5jeUNhcmQodmFjYW5jeSwgc2VsZWN0RmlsdGVyKSB7XHJcbiAgICBjb25zdCB7IHJvbGUsIGxldmVsLCBsYW5ndWFnZXMsIHRvb2xzIH0gPSB2YWNhbmN5O1xyXG4gICAgY29uc3QgY2F0b2dvcmllcyA9IFtyb2xlLCBsZXZlbCwgLi4ubGFuZ3VhZ2VzLCAuLi50b29sc10ubWFwKChlbCkgPT4gZWwpO1xyXG5cclxuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBlbC5jbGFzc05hbWUgPSBgdmFjYW5jeV9fY2FyZCAke3ZhY2FuY3kuZmVhdHVyZWQgPyAndmFjYW5jeV9fY2FyZC0tZmVhdHVyZWQnIDogJyd9YDtcclxuXHJcbiAgICBlbC5pbm5lckhUTUwgPSBgXHJcbiAgICA8aW1nIHNyYz1cIiR7dmFjYW5jeS5sb2dvfVwiIGNsYXNzPVwidmFjYW5jeV9faW1nXCIgYWx0PVwiXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwidmFjYW5jeV9faW5mb1wiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2YWNhbmN5X190YWdzXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGFnIHZhY2FuY3lfX3RhZ1wiPiR7dmFjYW5jeS5jb21wYW55fTwvc3Bhbj5cclxuICAgICAgICAgICAgJHt2YWNhbmN5Lm5ldyA/ICc8c3BhbiBjbGFzcz1cInRhZyB0YWctLW5ldyB2YWNhbmN5X190YWdcIj5OZXchPC9zcGFuPicgOiAnJ31cclxuICAgICAgICAgICAgJHt2YWNhbmN5LmZlYXR1cmVkID8gJzxzcGFuIGNsYXNzPVwidGFnIHRhZy0tZmVhdHVyZWQgdmFjYW5jeV9fdGFnXCI+ZmVhdHVyZWQ8L3NwYW4+JyA6ICcnfVxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8aDIgY2xhc3M9XCJ2YWNhbmN5X190aXRsZVwiPlxyXG4gICAgICAgICAgICA8YSBocmVmPVwiXCIgdGl0bGU9XCJcIj4gJHt2YWNhbmN5LnBvc2l0aW9ufSA8L2E+XHJcbiAgICAgICAgPC9oMj5cclxuXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInZhY2FuY3lfX2Rlc2NyaXB0aW9uXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFjYW5jeV9fZGVzY3JpcHRpb24taXRlbVwiPiR7Y29udmVydFRpbWUodmFjYW5jeS5wb3N0ZWRBdCl9PC9zcGFuPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhY2FuY3lfX2Rlc2NyaXB0aW9uLWl0ZW1cIj4ke3ZhY2FuY3kuY29udHJhY3R9PC9zcGFuPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhY2FuY3lfX2Rlc2NyaXB0aW9uLWl0ZW1cIj4ke3ZhY2FuY3kubG9jYXRpb259PC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwidmFjYW5jeV9fYnV0dG9uc1wiPlxyXG4gICAgICAgICR7Y2F0b2dvcmllcy5tYXAoY2F0ZWdvcnkgPT4gYFxyXG4gICAgICAgICAgICA8YnV0dG9uIFxyXG4gICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiIFxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJidXR0b24gYnV0dG9uLS1wcmltYXJ5IHZhY2FuY3lfX2J0blwiIFxyXG4gICAgICAgICAgICAgICAgZGF0YS1jYXRlZ29yeT1cIiR7Y2F0ZWdvcnkudG9Mb3dlckNhc2UoKX1cIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAke2NhdGVnb3J5fVxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICBgKS5qb2luKCcnKX1cclxuICAgIDwvZGl2PlxyXG4gICAgYDtcclxuXHJcbiAgICBjb25zdCBidG5zID0gZWwucXVlcnlTZWxlY3RvckFsbCgnLnZhY2FuY3lfX2J0bicpO1xyXG5cclxuICAgIGJ0bnMuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLnZhY2FuY3lfX2J0bicpO1xyXG4gICAgICAgICAgICBjb25zdCBjYXRlZ29yeSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2F0ZWdvcnknKTtcclxuICAgICAgICAgICAgc2VsZWN0RmlsdGVyKGNhdGVnb3J5KTtcclxuICAgICAgICB9KVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGVsO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VGltZShwb3N0ZWRBdFRpbWVzdGFtcCkge1xyXG4gICAgY29uc3Qgbm93ID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XHJcbiAgICBjb25zdCBkaWZmZXJlbmNlSW5TZWNvbmRzID0gbm93IC0gcG9zdGVkQXRUaW1lc3RhbXA7XHJcblxyXG4gICAgY29uc3Qgc2Vjb25kc0luRGF5ID0gODY0MDA7XHJcbiAgICBjb25zdCBzZWNvbmRzSW5XZWVrID0gNjA0ODAwO1xyXG4gICAgY29uc3Qgc2Vjb25kc0luTW9udGggPSAyNTkyMDAwO1xyXG5cclxuICAgIGlmIChkaWZmZXJlbmNlSW5TZWNvbmRzID49IHNlY29uZHNJbk1vbnRoKSB7XHJcbiAgICAgICAgY29uc3QgbW9udGhzUGFzc2VkID0gTWF0aC5mbG9vcihkaWZmZXJlbmNlSW5TZWNvbmRzIC8gc2Vjb25kc0luTW9udGgpO1xyXG4gICAgICAgIHJldHVybiBgJHttb250aHNQYXNzZWR9bW8gYWdvYDtcclxuICAgIH0gZWxzZSBpZiAoZGlmZmVyZW5jZUluU2Vjb25kcyA+PSBzZWNvbmRzSW5XZWVrKSB7XHJcbiAgICAgICAgY29uc3Qgd2Vla3NQYXNzZWQgPSBNYXRoLmZsb29yKGRpZmZlcmVuY2VJblNlY29uZHMgLyBzZWNvbmRzSW5XZWVrKTtcclxuICAgICAgICByZXR1cm4gYCR7d2Vla3NQYXNzZWR9dyBhZ29gO1xyXG4gICAgfSBlbHNlIGlmIChkaWZmZXJlbmNlSW5TZWNvbmRzID49IHNlY29uZHNJbkRheSkge1xyXG4gICAgICAgIGNvbnN0IGRheXNQYXNzZWQgPSBNYXRoLmZsb29yKGRpZmZlcmVuY2VJblNlY29uZHMgLyBzZWNvbmRzSW5EYXkpO1xyXG4gICAgICAgIHJldHVybiBgJHtkYXlzUGFzc2VkfWQgYWdvYDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IGdldFZhY2FuY2llcyB9IGZyb20gXCIuLi8uLi9hcGkvdmFjYW5jaWVzL2dldFZhY2FuY2llc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVWYWNhbmN5RmlsdGVyIH0gZnJvbSBcIi4vY29tcG9uZW50cy9jcmVhdGVWYWNhbmN5RmlsdGVyXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVZhY2FuY3lDYXJkIH0gZnJvbSBcIi4vY29tcG9uZW50cy9jcmVhdGVWYWNhbmN5Q2FyZFwiO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlVmFjYW5jaWVzKHZhY2FuY2llcywgc2VsZWN0RmlsdGVyKSB7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFjYW5jaWVzKSAmJiB2YWNhbmNpZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgIHJldHVybiB2YWNhbmNpZXMucmVkdWNlKChhY2N1bSwgdmFjYW5jeSkgPT4ge1xyXG4gICAgICBhY2N1bS5hcHBlbmRDaGlsZChjcmVhdGVWYWNhbmN5Q2FyZCh2YWNhbmN5LCBzZWxlY3RGaWx0ZXIpKTtcclxuICAgICAgXHJcblxyXG4gICAgICByZXR1cm4gYWNjdW07XHJcbiAgICB9LCBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJ2YWNhbmNpZXMtbGlzdF9fbWVzc2FnZVwiPkxpc3Qgb2YgdmFjYW5jaWVzIGVtcHR5PC9kaXY+JztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpbml0VmFjYW5jaWVzQm9hcmQgPSBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgdmFjYW5jaWVzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZhY2FuY2llc0NvbnRhaW5lcicpO1xyXG4gIGNvbnN0IHZhY2FuY2llc0ZpbHRlckNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2YWNhbmNpZXNGaWx0ZXJDb250YWluZXInKTtcclxuICBpZiAoIXZhY2FuY2llc0NvbnRhaW5lciB8fCAhdmFjYW5jaWVzRmlsdGVyQ29udGFpbmVyKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBsZXQgZmlsdGVycyA9IFtdO1xyXG5cclxuICBjb25zdCBjcmVhdGVWYWNhbmNpZXNCb2FyZCA9IGFzeW5jICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHZhY2FuY2llcyA9IGF3YWl0IGdldFZhY2FuY2llcyhmaWx0ZXJzKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGZpbHRlcnNIVE1MID0gY3JlYXRlVmFjYW5jeUZpbHRlcihmaWx0ZXJzLCB1cGRhdGVGaWx0ZXJzKTtcclxuICAgICAgY29uc3QgdmFjYW5jaWVzSFRNTCA9IGNyZWF0ZVZhY2FuY2llcyh2YWNhbmNpZXMsIHNlbGVjdEZpbHRlcik7XHJcblxyXG4gICAgICB2YWNhbmNpZXNGaWx0ZXJDb250YWluZXIucmVwbGFjZUNoaWxkcmVuKCk7XHJcbiAgICAgIHZhY2FuY2llc0ZpbHRlckNvbnRhaW5lci5hcHBlbmRDaGlsZChmaWx0ZXJzSFRNTCk7XHJcbiAgICAgIHZhY2FuY2llc0NvbnRhaW5lci5yZXBsYWNlQ2hpbGRyZW4oKTtcclxuICAgICAgdmFjYW5jaWVzQ29udGFpbmVyLmFwcGVuZENoaWxkKHZhY2FuY2llc0hUTUwpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIHZhY2FuY2llczonLCBlKTtcclxuICAgICAgdmFjYW5jaWVzQ29udGFpbmVyLmlubmVySFRNTCA9IGBcclxuICAgICAgPGRpdiBjbGFzcz1cInZhY2FuY2llcy1saXN0X19tZXNzYWdlLS1lcnJvclwiPlxyXG4gICAgICAgIFNvcnJ5ISBTb21ldGhpbmcgd2VudCB3cm9uZyFcclxuICAgICAgPC9kaXY+YDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IHVwZGF0ZUZpbHRlcnMgPSBhc3luYyAobmV3RmlsdGVycykgPT4ge1xyXG4gICAgZmlsdGVycyA9IG5ld0ZpbHRlcnM7XHJcbiAgICBhd2FpdCBjcmVhdGVWYWNhbmNpZXNCb2FyZCgpO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2VsZWN0RmlsdGVyID0gYXN5bmMgKGZpbHRlcikgPT4ge1xyXG4gICAgZmlsdGVycy5wdXNoKGZpbHRlcik7XHJcbiAgICBhd2FpdCBjcmVhdGVWYWNhbmNpZXNCb2FyZCgpO1xyXG4gIH1cclxuXHJcbiAgYXdhaXQgY3JlYXRlVmFjYW5jaWVzQm9hcmQoKTtcclxufVxyXG4iLCJleHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VmFjYW5jaWVzKGZpbHRlcnMpIHtcclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiLi9kYXRhLmpzb25cIik7XHJcbiAgY29uc3QgdmFjYW5jaWVzID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICByZXR1cm4gZmlsdGVycy5yZWR1Y2UoKGFjY3VtLCBjYXRlZ29yeSkgPT4ge1xyXG4gICAgYWNjdW0gPSBhY2N1bS5maWx0ZXIodmFjYW5jeSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgcm9sZSwgbGV2ZWwsIGxhbmd1YWdlcywgdG9vbHMgfSA9IHZhY2FuY3k7XHJcbiAgICAgIGNvbnN0IHZhY2FuY3lGaWx0ZXJpbmdQcm9wZXJ0eSA9IFtyb2xlLCBsZXZlbCwgLi4ubGFuZ3VhZ2VzLCAuLi50b29sc10ubWFwKChlbCkgPT4gZWwudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgIHJldHVybiB2YWNhbmN5RmlsdGVyaW5nUHJvcGVydHkuaW5jbHVkZXMoY2F0ZWdvcnkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGFjY3VtO1xyXG4gIH0sIHZhY2FuY2llcyk7XHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlVmFjYW5jeUZpbHRlcihmaWx0ZXJzLCB1cGRhdGVGaWx0ZXJzKSB7XHJcbiAgLy8gdXBkYXRlRmlsdGVyc1xyXG4gIC8vIGZpbHRlckJ0biA9IHVwZGF0ZUZpbHRlcnMoWy4uLmZpbHRlcnNdKVxyXG4gIC8vIHJlc2V0QnRuID0gdXBkYXRlRmlsdGVycyhbXSk7XHJcblxyXG4gIGxldCBidXR0b25zSFRNTCA9IGZpbHRlcnMubWFwKGZpbHRlciA9PiBgPGJ1dHRvbiBjbGFzcz1cImJ1dHRvbiBidXR0b24tLXByaW1hcnkgYnV0dG9uLS1jbGVhclwiIGRhdGEtY2F0ZWdvcnk9XCIke2ZpbHRlci50b0xvd2VyQ2FzZSgpfVwiPiR7ZmlsdGVyfTwvYnV0dG9uPmApLmpvaW4oJycpO1xyXG5cclxuICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGVsLmNsYXNzTmFtZSA9ICd2YWNhbmNpZXMtZmlsdGVyJztcclxuICBlbC5pbm5lckhUTUwgPSBgXHJcbiAgICA8ZGl2IGNsYXNzPVwidmFjYW5jaWVzLWZpbHRlcl9fYnRuc1wiIGlkPVwiZmlsdGVyQnRuc1wiPlxyXG4gICAgICAke2J1dHRvbnNIVE1MfVxyXG4gICAgPC9kaXYgPlxyXG4gICAgPHNwYW4gY2xhc3M9XCJ2YWNhbmNpZXMtZmlsdGVyX19yZXNldFwiPkNsZWFyPC9zcGFuPlxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IGJ0bnMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKCcuYnV0dG9uLS1jbGVhcicpXHJcblxyXG4gIGJ0bnMuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcuYnV0dG9uLS1jbGVhcicpO1xyXG5cclxuICAgICAgaWYgKHRhcmdldCkge1xyXG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jYXRlZ29yeScpO1xyXG4gICAgICAgIGNvbnN0IG5ld0ZpbHRlcnMgPSBmaWx0ZXJzLmZpbHRlcihmaWx0ZXIgPT4gZmlsdGVyICE9PSBjYXRlZ29yeSk7XHJcbiAgICAgICAgdXBkYXRlRmlsdGVycyhuZXdGaWx0ZXJzKTtcclxuICAgICAgICB0YXJnZXQucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IHJlc2V0QnRuID0gZWwucXVlcnlTZWxlY3RvcignLnZhY2FuY2llcy1maWx0ZXJfX3Jlc2V0JylcclxuICByZXNldEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHJcbiAgICB1cGRhdGVGaWx0ZXJzKFtdKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGVsO1xyXG59XHJcblxyXG4iLCIvLyBpbXBvcnQgeyBOb3R5ZiB9IGZyb20gJ25vdHlmJztcclxuLy8gaW1wb3J0IHsgd2FpdCB9IGZyb20gXCIuL3V0aWxzXCI7XHJcbmltcG9ydCB7IGluaXRWYWNhbmNpZXNCb2FyZCB9IGZyb20gXCIuL21vZHVsZXMvdmFjYW5jaWVzQm9hcmQvaW5pdFZhY2FuY2llc0JvYXJkXCI7XHJcblxyXG5jb25zdCBBcHAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgaW5pdFZhY2FuY2llc0JvYXJkKCk7XHJcbn1cclxuXHJcbkFwcCgpO1xyXG5cclxuXHJcbi8vIGNvbnN0IG5vdHlmID0gbmV3IE5vdHlmKCk7XHJcbi8vIGNvbnN0IHRlc3RGbiA9IGFzeW5jICgpID0+IHtcclxuLy8gICBhd2FpdCB3YWl0KDMwMCk7XHJcbi8vICAgbm90eWYuZXJyb3IoJ1BsZWFzZSBmaWxsIG91dCB0aGUgZm9ybScpO1xyXG4vLyB9XHJcbi8vIHRlc3RGbigpO1xyXG4iXSwibmFtZXMiOlsiY3JlYXRlVmFjYW5jeUNhcmQiLCJ2YWNhbmN5Iiwic2VsZWN0RmlsdGVyIiwicm9sZSIsImxldmVsIiwibGFuZ3VhZ2VzIiwidG9vbHMiLCJjYXRvZ29yaWVzIiwibWFwIiwiZWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJmZWF0dXJlZCIsImlubmVySFRNTCIsImxvZ28iLCJjb21wYW55IiwibmV3IiwicG9zaXRpb24iLCJwb3N0ZWRBdFRpbWVzdGFtcCIsImRpZmZlcmVuY2VJblNlY29uZHMiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93Iiwic2Vjb25kc0luV2VlayIsInNlY29uZHNJbk1vbnRoIiwiY29udmVydFRpbWUiLCJwb3N0ZWRBdCIsImNvbnRyYWN0IiwibG9jYXRpb24iLCJjYXRlZ29yeSIsInRvTG93ZXJDYXNlIiwiam9pbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiYnRuIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJ0YXJnZXQiLCJjbG9zZXN0IiwiZ2V0QXR0cmlidXRlIiwiYXN5bmMiLCJ2YWNhbmNpZXNDb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsInZhY2FuY2llc0ZpbHRlckNvbnRhaW5lciIsImZpbHRlcnMiLCJjcmVhdGVWYWNhbmNpZXNCb2FyZCIsInZhY2FuY2llcyIsInJlc3BvbnNlIiwiZmV0Y2giLCJqc29uIiwicmVkdWNlIiwiYWNjdW0iLCJmaWx0ZXIiLCJpbmNsdWRlcyIsImdldFZhY2FuY2llcyIsImZpbHRlcnNIVE1MIiwidXBkYXRlRmlsdGVycyIsImJ1dHRvbnNIVE1MIiwibmV3RmlsdGVycyIsInJlbW92ZSIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVWYWNhbmN5RmlsdGVyIiwidmFjYW5jaWVzSFRNTCIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImFwcGVuZENoaWxkIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNyZWF0ZVZhY2FuY2llcyIsInJlcGxhY2VDaGlsZHJlbiIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJwdXNoIiwiaW5pdFZhY2FuY2llc0JvYXJkIl0sIm1hcHBpbmdzIjoieUJBRU8sU0FBU0EsRUFBa0JDLEVBQVNDLEdBQ3ZDLE1BQU1DLEtBQUVBLEVBQUlDLE1BQUVBLEVBQUtDLFVBQUVBLEVBQVNDLE1BQUVBLEdBQVVMLEVBQ3BDTSxFQUFhLENBQUNKLEVBQU1DLEtBQVVDLEtBQWNDLEdBQU9FLEtBQUtDLEdBQU9BLElBRS9EQSxFQUFLQyxTQUFTQyxjQUFjLE9BQ2xDRixFQUFHRyxVQUFhLGtCQUFnQlgsRUFBUVksU0FBVywwQkFBNEIsSUFFL0VKLEVBQUdLLFVBQWEsbUJBQ0piLEVBQVFjLHdKQUdxQmQsRUFBUWUsK0JBQ3ZDZixFQUFRZ0IsSUFBTSxzREFBd0QsbUJBQ3RFaEIsRUFBUVksU0FBVywrREFBaUUsK0ZBSS9EWixFQUFRaUIsbUlD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